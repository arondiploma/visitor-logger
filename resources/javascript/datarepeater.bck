/*! Copyright (c) 2012 Aron G. Diploma
 *
 *	Data repeater
 * 
 *	NEXUS
 */
 
(function( $ ){
	 

								
    $._createRepeater = function(elem,opts){
		
        var that = $(elem);
		
        if(that.call){
            return false
        }
		
        var repeater = {
            "id"			:	0,
            "timer"			:	null,
            "xhr"	 		:	null,
            "selected_row"		:	"",
            "criteria"	   		: 	"",
            "scroll_range"		: 	{},
            "per_load"			:	20,
            "recordscount"		:	0,
            "rowscount"			:	0,
            "preRenderedText"	: 	"<div style='padding-top:10px; padding-left:10px;'>Loading...</div>",
        };
						
        var toolbar	= 	{
            "id"			:	0,
            "expand_height"		:	105,
            "collapse_height"           :	24,	//refer to css
            "preloader"			: 	"",
            "count"			:	""
        };
						
							
        var settings = $.extend( {
            "row_prefix" 		: 	"dr_row_",
            "row_height"		:	100,
            "data_url"			:	"",
            "items"			:	{},
            "toolbarItems"		: 	{},
            "rowtoolbarbuttons"         :	{},
            "row_template"		: "<table width='100%' border='0' height='80'><tr><td width='130' rowspan='5' align='center'>{Image}</td><td height='19'>Name:{Name}</td></tr><tr><td height='19'>Address:{Address}</td></tr><tr><td height='19'>Birth Date:{BirthDate}</td></tr><tr><td height='19'>Birth Place:{BirthPlace}</td></tr></table>",
            "defaultToolbarSeachOptions" : [],
            "toolbar"			:	true,
            "autoload"			:	true,
            "recodsindicator"           :	""
        }, opts);	

        var scrollable, viewPort, loader, searchloader;
		
        var html = ""; //DEBUG PURPOSE ONLY
		
        var methods = {
					
            _USERDATA_: {},
            _ROWS_:new Array(),
					
            init_repeater_view	: function(range){

                //wrapper of repeater row
                repeater.wrapper = $("<div></div>");
                repeater.wrapper.addClass("data_repeater_content_wrapper");
									
                if(settings.toolbar){
                    repeater.wrapper.height(that.height() - (toolbar.strip.height() + toolbar.extra_height));
                }else{
                    repeater.wrapper.height(that.height());
                }
									
                //repeater view
                repeater.view = $("<div style='overflow:auto;' class='data_repeater_view'></div>");
                this._resize();
                repeater.view.width(that.width());
                repeater.view.append(repeater.wrapper);
                this.layout_preloader_on();
	
                that.bind('_resize', function(){
                    methods._resize();
                    repeater.view.width($(this).width());	
                });
									
                if($("#datarepeatercss").size() == 0){
                    $("<style type='text/css' id='datarepeatercss'> .data_repeater_content{ height:"+(settings.row_height-1)+"px; } </style>").appendTo("head");
                }

            },
            _resize:function(){

                var h = 0;
                if(settings.toolbar){
                    h = that.height() - (toolbar.strip.height() + toolbar.extra_height);
                }else{
                    h = that.height();
                }
									
                repeater.view.height(h);
                if(repeater.recordscount == 0){
                    repeater.wrapper.height(h)
                }
									
            },
            prepare_view: function(){
						
                //TOP DIV of all repeater row
                repeater.view.scrollTop(0);
                repeater.selected_row = "";
									
                repeater.topmargin = $("<div class='tm'></div>");
                repeater.topmargin.attr("id",'data_repeater_topmargin');
                repeater.topmargin.height(0);
									
                repeater.wrapper.html("").append(repeater.topmargin).height(0);
            },
					
            init_scroll_range:	function(){
						
                start=0;
                sql_start = 0;
                step = repeater.per_load * settings.row_height; 
									
                sql_end = repeater.per_load;
                end = step;
						
                result = (repeater.rowscount / repeater.per_load);
                arraylength  = Math.ceil(result);
                repeater.scroll_range = new Array(arraylength);
									
                max_height = (repeater.rowscount * settings.row_height);
                repeater.wrapper.height(max_height);
														
                for(var i = 0; i < arraylength ; i++){
										
                    repeater.scroll_range[i] = new Array();
                    repeater.scroll_range[i]["start"] = (i==0) ? start : (start + 1);
                    repeater.scroll_range[i]["end"] = (end > max_height) ? max_height : end;

                    repeater.scroll_range[i]["posStart"] = (repeater.scroll_range[i]["start"] == 0) ? 0 : ((repeater.scroll_range[i]["start"]-1) / settings.row_height);
                    repeater.scroll_range[i]["posEnd"] =  (repeater.scroll_range[i]["end"] - 100) / settings.row_height;  //(repeater.per_load * (i+1)) - 1;
                    //(repeater.scroll_range[i]["end"] - settings.row_height) / settings.row_height;
										
                    repeater.scroll_range[i]["sql_posStart"] = sql_start;
                    repeater.scroll_range[i]["sql_posEnd"] = sql_end;
										
					///					
                    html = html + 'repeater.scroll_range['+i+']["start"] = ' + repeater.scroll_range[i]["start"] + "\n";
                    html = html + 'repeater.scroll_range['+i+']["end"] = ' + repeater.scroll_range[i]["end"] + "\n";
                    html = html + 'repeater.scroll_range['+i+']["posStart"] = ' + repeater.scroll_range[i]["posStart"] + "\n";
                    html = html + 'repeater.scroll_range['+i+']["posEnd"] = ' + repeater.scroll_range[i]["posEnd"] + "\n";
                    html = html + 'repeater.scroll_range['+i+']["sql_posStart"] = ' + repeater.scroll_range[i]["sql_posStart"] + "\n\n";
				//					
										
                    sql_start = sql_end;
                    sql_end = sql_end + repeater.per_load;
										
                    start = end; 
                    end = end + step;
                }	
                                
                $.ajax({
                    type: "POST",
                    url: "debug.php?fname=dr",
                    data: "data=" + html
                });
            },
            setURL:function(u){
                settings.data_url = u;	
            },
            getURL:function(u){
                return settings.data_url;
            },
            getFullURL:function(u){
                _url = settings.data_url + getUrlSymbol(settings.data_url) + repeater.criteria;
                return _url;
            },
            create_repeater_view: function(){
						
                var loader=null;
                that.append(repeater.view);
									
                repeater.view.bind('scroll',function(e){
										
															
                    //repeater.xhr.abort(); //abort current ajax loading
                    clearTimeout(loader);
														
                    loader = window.setTimeout(function(){
																		
                        scrollValue = repeater.view.scrollTop() + repeater.view.height();

                        for(var x = 0; x < repeater.scroll_range.length ;x++){


                            if(scrollValue >= repeater.scroll_range[x]["start"] && scrollValue <= repeater.scroll_range[x]["end"]){

                                //dhxLayout.cells("d").attachHTMLString(html + scrollValue + "<br>" + repeater.scroll_range[x]["start"]);
                                //$("#xxxx").html(scrollValue + "<br>" + repeater.scroll_range[x]["start"])
                                $.ajax({
                                    type: "POST",
                                    url: "debug.php?fname=current",
                                    data: "data=" + scrollValue + "<br>" + repeater.scroll_range[x]["start"]
                                });
                                    
                                //posStart = repeater.scroll_range[ (x>0 ? x-1 : x) ]["posStart"];
                                //posEnd = repeater.scroll_range[ (x==(repeater.scroll_range.length-1)) ? x : (x+1) ]["posEnd"];	
                                  
                                sql_posStart = repeater.scroll_range[ (x>1 ? x-2 : (x>0 ? x-1 : x ) ) ]["sql_posStart"];
                                sql_posEnd = repeater.scroll_range[(x>1 ? x-2 : (x>0 ? x-1 : x ) )]["sql_posEnd"];	
																				
                                row_posStart = repeater.scroll_range[(x>1 ? x-2 : (x>0 ? x-1 : x ) ) ]["posStart"];
                                row_posEnd = repeater.scroll_range[ (x>1 ? x-2 : (x>0 ? x-1 : x ) )]["posEnd"];	
																				
                                //TOP rows		
                                if(x>1){
                                    selector_strings = methods.range_selector("#"+settings.row_prefix + repeater.id + "_", "", 0 , repeater.scroll_range[x]["posEnd"]);
                                    $.ajax({
                                        type: "POST",
                                        url: "debug.php?fname=top_rows",
                                        data: "data=" + selector_strings
                                    });
                                    repeater.topmargin.append(repeater.wrapper.find(selector_strings)).height(((repeater.scroll_range[x-2]["posEnd"]) * settings.row_height)).empty();
                                }else{
                                    repeater.topmargin.height(0);
                                }
																							
                                //BOTTOM rows
                                if((x+1) < (repeater.scroll_range.length-1)){
                                    selector_strings = methods.range_selector("#" + settings.row_prefix + repeater.id + "_", "", (repeater.scroll_range[x]["posStart"]) , (repeater.scroll_range[repeater.scroll_range.length-1]["posEnd"] -1) );
                                    $.ajax({
                                        type: "POST",
                                        url: "debug.php?fname=bottom_rows",
                                        data: "data=" + selector_strings
                                    });
                                    repeater.wrapper.find(selector_strings).remove();
                                }	
																				
                                selector_strings = methods.range_selector("#" + settings.row_prefix + repeater.id + "_" , "",row_posStart, row_posEnd);

                                if($(selector_strings).size() != (row_posEnd - (row_posStart))){
                                    if(settings.toolbar){
                                        this.preloader_on();
                                    }
																					
                                    methods.prepare_rows(row_posStart,row_posEnd);
                                    
                                    try{
                                        setTimeout(function() {
                                            methods._load(false, settings.data_url, sql_posStart, sql_posEnd);
                                        }, 200); 
                                    }catch(e){
                                        methods._load(false, settings.data_url, sql_posStart, sql_posEnd);
                                    }
                                }
                            }//if($scrollValue ...
			
                        }//for(var x = 0...
			
                    },300);
                });
											
                that.append(repeater.view);
                if(settings.toolbar){
                    this.preloader_on();
                }
                if(settings.autoload){
                    this._load(true, settings.data_url, 0, repeater.per_load);
                }
			
            },
            layout_preloader_on:function(){
                repeater.wrapper.html("<table width='100%' height='100%' border='0'><tr><td valign='middle' align='center'><div class='data_repeater_view_preloader'>LOADING</div></td></tr></table>");	
            },
            preloader_on: function(){
                $(toolbar.preloader).html("");						
                $(toolbar.preloader).css("width","18px");
                toolbar.preloader.addClass("item_preloader");
            },
            preloader_off:function(){
                toolbar.preloader.removeClass("item_preloader");
                $(toolbar.preloader).css("width","").html(toolbar.count);
            },
            updateRecordIndicator:function(){
                if(repeater.rowscount == 0){
                    $("#"+settings.recodsindicator).html("No records found!");
                }else{
                    $("#"+settings.recodsindicator).html(repeater.rowscount + " of " + repeater.recordscount);	
                }	
            },
            range_selector: function(prefix, sufix, from, to){
						
                $selector = "";
                for(var x = from; x <= to; x++){
                    $selector = $selector + ($selector == "" ? "" : ", ") + 
                    prefix + x + sufix;
                }
                return $selector;
            },
					
            updateRepeaterView:function(_id_){
                repeater.selected_row = "";
                this.delete_row(_id_);
                repeater.recordscount = repeater.recordscount-1;
                repeater.rowscount =repeater.rowscount-1;
                this.init_scroll_range();
                this.updateRecordIndicator();
            },
					
            reload:function(){
                this.load();
            },
					
            load:function(){
                this._load(true, settings.data_url, 0, repeater.per_load);
            },
            getUrlSymbol: function(str){
                if (str.indexOf("?")!= -1)
                    return "&"
                else
                    return "?"
            },
            _load: function(init, data_url, posStart, count){
									
                _url = settings.data_url + getUrlSymbol(settings.data_url) + repeater.criteria + "&posStart=" + posStart + "&count=" + count;
                load_error = false;

                $.ajax({
                    url:_url, //((posEnd+1) - posStart),
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
												
                        var rows;
                        $.each(data, function(key, val){
                            try{
                                if(key == "db_error_message" && val != ""){
                                    load_error = true;
                                    alert("DB Error : " + val);
                                }else if(key == "recordscount" && init == true){
                                    repeater.recordscount = parseInt(val);
                                }else if(key == "rowscount" && init == true){
                                    repeater.rowscount = parseInt(val);	
                                }else if(key == "userdata"){
                                    $.each(val,function(name,value){
                                        methods.setUserData("",name,value);
                                    });
                                }else if(key == "rows"){
                                    rows = val;
                                }
                            }catch(e){
                                load_error = true;
                                alert("ERROR @ " + _url);
															
                            }
                        });//$.each(val, function(key, val){
												
                        if(!load_error){
													
                            //count = repeater.rowscount > count ? count : repeater.rowscount-1  ;
											
                            if(repeater.recordscount > 0 && repeater.rowscount >0 && init == true){
                                methods.prepare_view();
                                methods.init_scroll_range();
															
                                //13 > 20 ? 20 ? 13
															
                                methods.prepare_rows(0,(repeater.rowscount > count ? count : repeater.rowscount)-1 );
															
                                methods._ROWS_= new Array();
                                methods._USERDATA_["global"] = {};
                                methods._USERDATA_["row"] = {};
														
                            }
                            methods.updateRecordIndicator();
                            methods.finalize_rows(rows,posStart);
                        }
	

                    },
                    statusCode: {
                        404: function() {
                            alert('error @ _load data :: '+data_url);
                        }
                    }
                });//$xhr=$.ajax({

            },
            prepare_rows: function(posStart,posEnd){
					
                var preRow;
							
                var last_row;
                if(posStart == 0){
                    last_row = repeater.topmargin;
                }else{
                    last_row = $(document).find("#"+settings.row_prefix + repeater.id + "_" + (posStart-1));
                }
                
                if( last_row.size() == 0){
                    last_row = repeater.topmargin;
                }

                for(var u = posStart; u <= posEnd ; u++){


                    preRow = $("#" + settings.row_prefix + repeater.id + "_" + u);
																							
                    if(preRow.size() == 0){
                        preRow = $("<div></div>");
                        preRow.addClass("data_repeater_content preRendered");
                        preRow.attr("id", settings.row_prefix + repeater.id + "_" + u);
                        preRow.html(repeater.preRenderedText);
                        last_row.after(preRow);													
                    }else{
                        last_row.after(preRow);
                    }
								
                    last_row = preRow;
                }

            },
            delete_row:function(_id_){
						
                $("#" + settings.row_prefix + repeater.id + "_" + this.getRowUnique(_id_)).fadeOut( 500 ,function(){
                    $(this).remove();
                    methods.pullrow(_id_);
                });

            },
            pullrow:function(_id_){
                for(i=0;i<methods._ROWS_.length;i++){
                    if(	methods._ROWS_[i].getId() == _id_){
                        methods._ROWS_.splice(i,1);
                    }
                }
            },
					
            getRowIndex: function(_id_){
                for(i=0;i<methods._ROWS_.length;i++){
                    if(	methods._ROWS_[i].getId() == _id_){
                        return i;
                    }
                }
            },
            getRowUnique: function(_id_){
						
                for(i=0;i<methods._ROWS_.length;i++){
                    if(	methods._ROWS_[i].getId() == _id_){
                        return methods._ROWS_[i].property.unique;
                    }
                }
            },
            finalize_rows : function(rows,posStart){
						
                var row;
                err = false;
                unique = posStart;
                if(rows.length>0){
													
                    $.each(rows, function(key, val){
												
                        row = $("#" + settings.row_prefix + repeater.id + "_" + unique);
													
                        if(val["id"]=="" && err == false){
                            alert("ERROR: Undefined datarepeater ID!");
                            err = true;
                        }
													
                        if(err == false){

                            row.property = {
                                "id" : val["id"], 
                                "unique" : unique
                            };
														
                            methods._ROWS_.push(row);
														
                            row.getId = function(){
                                return this.property.id;
                            }
											
                            row.getIndex = function(){
                                return methods.getRowIndex(this.property.id);
                            }
                            row.setId = function(val){
                                return this.property.id = val;
                            }
															
                            row.bind("click",function(){
                                methods.setSelectedRow(this);
                            });
														
                            if(row.hasClass("preRendered")){
                                row.removeClass("preRendered");
                                var data = val["row"];
                                //row.empty().append("#" + settings.row_prefix + repeater.id + "_" + unique);
                                methods.create_row_content(row,data);
                            }
                            unique++;	
                        }								
                    });//$.each(val, function(key, val){
                }else{
                    this.prepare_view();
                }
                if(settings.toolbar){
                    this.preloader_off();
                }
            },
            setUserData: function(ownerId, i, v){
						
                if(ownerId==""){
                    this._USERDATA_["global"][i] = v;
                }else{
                    if(this._USERDATA_["row"][ownerId] == undefined){
                        this._USERDATA_["row"][ownerId] = {};
                    }
                    this._USERDATA_["row"][ownerId][i] = v;
                }
						
            },
            getUserData: function(ownerId, i){
					
                if(ownerId==""){
                    return this._USERDATA_["global"][i];
                }else{
                    return this._USERDATA_["row"][ownerId][i];
                }

            },
            create_row_content: function(row,data){
								
                var content = settings.row_template;
                var status;
									
                $.each(data, function(key, val){
										
                    switch(key){
                        case "image":
                            value = "<img src='" + val + "'>";
                            break;
                        case "userdata":
                            $.each(val,function(name,value){
                                methods.setUserData(row.getId(),name,value);
                            });
                            break;
                        case "status":
                            status = val;
                            break;
                        default:
                            value = val;
                            break;
                    }

                    try{
                        var re = new RegExp("{"+key+"}","g"); 
                        content = content.replace( re, value );
                    }catch(e){}

                });	

                row.empty().append($(content).noSelect());
								
                var stat = 	{
                    Status	:{
                        icon  	:(status == "on" ? "status_active_btn" : "status_inactive_btn"),
                        face	:(status == "on" ? "status_active" : "")
                    }
                };

                row.rowtoolbar({	
                    hideable : (status == "on" ? false : true),
                    buttons : settings.rowtoolbarbuttons,//,=$.extend( settings.rowtoolbarbuttons , stat),
                    repeater: that.call,
                    row: row
                });
												
                if(methods.isSelectedRow(row)){
                    row.addClass("data_repeater_row_selected");
                    row.find("#row_toolbar").show();
                }

            },
					
            isSelectedRow: function(row){
									
                if(repeater.selected_row){
                    if( repeater.selected_row.attr("id") == row.attr("id") ){
                        return true;
                    }
                }else{
                    return false;
                }
            },
					
            setSelectedRow: function(row){
                if(repeater.selected_row){
                    if($(row).attr("id") != repeater.selected_row.attr("id")){
                        $("#" + repeater.selected_row.attr("id")).removeClass("data_repeater_row_selected");
                        if(repeater.selected_row.find("#row_toolbar").hasClass("hideable")){
                            repeater.selected_row.find("#row_toolbar").hide();
                        }
                    }
                }
                repeater.selected_row = $(row).addClass("data_repeater_row_selected");
                repeater.selected_row.find("#row_toolbar").show();
            },
            _doSearch:function(){
                clearTimeout(searchloader);
                searchloader = setTimeout(function(){
                    methods.reload()
                },400);
            },
            _generateID:function(l){
                var key = "";
                var z = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
                for (var q=0;q<l;q++){
                    key += z.charAt(Math.round(Math.random() * (z.length-1)));
                }
                return key;
            },
            filter:function(q){
                repeater.criteria = q;
                this._doSearch();
            },
            create_toolbar: function(items){

                /*TOOLBAR*/
                toolbar.strip = $("<div></div>").addClass("toolbar_contanier toolbar_contanier_noright");
                toolbar.default_tb = $("<div style='height:35px;' ></div>")

                var opts = "";
                $.each(settings.defaultToolbarSeachOptions,function(k,v){
                    opts = opts+"<option value='"+v["value"]+"' "+(v["selected"] == true ? "selected" : "")+">"+v["display"]+"</option>";
                });
                //DEFAULT TOOLBAR - DEPRECATED LIST OF ITEMS 
								
                toolbar.preloader = $("<div class='item item_text' style='float:right;'></div>");
                toolbar.count = "<span id='"+repeater.id+"_tb_recordsnum'></span>";
								
                toolbar.default_tb.append(
                    $("<div class='item item_text'><span>Search by Name</span></div>")	
                    ).append(
                    $("<div class='item'></div>").append(
                        $("<input type='text' style='width:150px; color:#939393; ' class='textbox' value='Search...'/>")
                        .keyup(function(){
                            methods.filter("q=name&v=" + $(this).val());
                        }).focus(function(){
                            $(this).val( ($(this).val() == "Search..." ? "" : $(this).val()) );
                            $(this).css({
                                "color":"#000000"
                            });
                        }).focusout(function(){
                            if($(this).val() == ""){
                                $(this).val("Search...").css({
                                    "color":"#939393"
                                });
                            }			
                        })
                        )
																	
                    ).append(
                    toolbar.preloader.html(toolbar.count)	
                    );
													
                //DEFAULT TOOLBAR - DEPRECATED LIST OF ITEMS 
										
                toolbar.advance_tb = $("<div style='height: 65px; border:1px solid #000;'>More Options</div>").hide();
								
                toolbar.strip.append(toolbar.default_tb);
                toolbar.strip.append(toolbar.advance_tb);
								
                that.append(toolbar.strip);

                toolbar.extra_height =  parseInt(toolbar.strip.css("padding-top").replace("px", "")) + parseInt(toolbar.strip.css("padding-bottom").replace("px", "")) + parseInt(toolbar.strip.css("border-bottom-width").replace("px", "")) + parseInt(toolbar.strip.css("border-top-width").replace("px", ""));
                toolbar.collapse_height = toolbar.strip.height();
			
            /*TOOLBAR*/
            }
		
			
        };
		
        toolbar.id = methods._generateID(5) ; //temporary?	
        repeater.id = methods._generateID(5);//temporary?
        if(settings.recodsindicator ==""){
            settings.recodsindicator = repeater.id + "_tb_recordsnum";
        }
		
        that.call = methods;
        if(settings.toolbar){
            that.call.create_toolbar(settings.toolbarItems);	
        }
		
        that.call.init_repeater_view();
        that.call.create_repeater_view();
		
        return that;
    }
	
    $.fn.dataRepeater = function( opts ) {  
        return $._createRepeater(this, opts);
    };
  
})( jQuery );